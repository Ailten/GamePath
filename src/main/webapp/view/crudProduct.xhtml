<?xml version='1.0' encoding='UTF-8' ?>
<!DOCTYPE html>
<html lang="fr"
      xmlns="http://www.w3.org/1999/xhtml"
      xmlns:ui="http://java.sun.com/jsf/facelets"
      xmlns:f="http://java.sun.com/jsf/core"
      xmlns:p="http://primefaces.org/ui"
      xmlns:h="http://java.sun.com/jsf/html" xmlns:c="http://java.sun.com/jsp/jstl/core">
<ui:composition template="/WEB-INF/templates/headerContentFooter.xhtml">
    <ui:define name="title">
        #{I18N['application.header.title']}
    </ui:define>
    <ui:define name="content">

        <!-- save historic -->
        <f:metadata>
            <f:event type="preRenderView" listener="#{historicalBean.saveNewPageHistoric('/view/crudProduct')}"/>
        </f:metadata>

        <!-- title page -->
        <div class="h-content">
            <h1>
                <h:outputText value="#{I18N['application.header.menuAddProduct']}"
                              rendered="#{productTheoricBean.isModeSelected('create')}"/>
                <h:outputText value="#{I18N['application.crudProductTheoric.titlePageDetails']}"
                              rendered="#{productTheoricBean.isModeSelected('read')}"/>
                <h:outputText value="#{I18N['application.crudProductTheoric.titlePageUpdate']}"
                              rendered="#{productTheoricBean.isModeSelected('update')}"/>
            </h1>
        </div>

        <div class="content-form-body-center">

            <!-- form crud product -->
            <h:form id="form-crud-product" class="form-crud">


                <!-- ______ start form crud ______ -->


                <!-- input String title -->
                <p:outputPanel class="panel-input">
                    <p:outputLabel for="input-product-title" value="#{I18N['application.crudProductTheoric.labelTitle']}"/>
                    <p:inputText id="input-product-title"
                                 required="true"
                                 disabled="#{productTheoricBean.isModeSelected('read')}"
                                 value="#{productTheoricBean.elementCrudSelected.title}"
                                 placeholder="#{I18N['application.crudProductTheoric.placeHolderTitle']}"
                                 validatorMessage="#{I18N['application.crudProductTheoric.errorTitle']}">
                        <p:ajax event="change" update="error-input-product-title, input-product-title"/>
                    </p:inputText>
                </p:outputPanel>
                <p:outputPanel class="panel-input">
                    <p:message id="error-input-product-title" for="input-product-title"/>
                </p:outputPanel>

                <!-- input float priceHtva -->
                <p:outputPanel class="panel-input" rendered="#{productTheoricBean.isModeSelected('create', 'update')}">
                    <p:outputLabel for="input-product-pricehtva" value="#{I18N['application.crudProductTheoric.labelPriceHtva']}"/>
                    <p:inputNumber id="input-product-pricehtva"
                                   required="true"
                                   disabled="false"
                                   value="#{productTheoricBean.elementCrudSelected.priceHtva}"
                                   minValue="0"
                                   decimalPlaces="2"
                                   decimalSeparator="#{I18N['application.crudPage.decimalSeparator']}"
                                   thousandSeparator="'"
                                   symbol="€"
                                   symbolPosition="s"
                                   placeholder="#{I18N['application.crudProductTheoric.placeHolderPriceHtva']}"
                                   validatorMessage="#{I18N['application.crudProductTheoric.errorPriceHtva']}">
                       <p:ajax event="change" update="error-input-product-pricehtva, input-product-price, input-product-pricehtva, panel-input-price-reduction"/>
                    </p:inputNumber>
                </p:outputPanel>
                <p:outputPanel class="panel-input" rendered="#{productTheoricBean.isModeSelected('create', 'update')}">
                    <p:message id="error-input-product-pricehtva" for="input-product-pricehtva"/>
                </p:outputPanel>

                <!-- input enum tva -->
                <p:outputPanel class="panel-input" rendered="#{productTheoricBean.isModeSelected('create', 'update')}">
                    <p:outputLabel for="input-product-tva" value="#{I18N['application.crudProductTheoric.labelTva']}"/>
                    <p:selectOneMenu id="input-product-tva"
                                     required="true"
                                     disabled="false"
                                     value="#{productTheoricBean.elementCrudSelected.tva}"
                                     converter="TvaConverter"
                                     validatorMessage="#{I18N['application.crudProductTheoric.errorTva']}">
                        <f:selectItem itemLabel="#{I18N['application.crudPage.emptyValuePlaceHolder']}"
                                      itemValue="#{null}"
                                      itemDisabled="true"
                                      noSelectionOption="true"/>
                        <!-- import all enum -->
                        <p:importEnum type="be.gamepath.projectgamepath.enumeration.Tva"
                                      var="enumImportTva"
                                      allSuffix="getAll"/>
                        <f:selectItems value="#{enumImportTva.getAll}"
                                       var="tva"
                                       itemLabel="#{tva.getTxtValue()}"
                                       itemValue="#{tva}"/>
                        <p:ajax event="change" update="error-input-product-tva, input-product-price, input-product-tva, panel-input-price-reduction"/>
                    </p:selectOneMenu>
                </p:outputPanel>
                <p:outputPanel class="panel-input" rendered="#{productTheoricBean.isModeSelected('create', 'update')}">
                    <p:message id="error-input-product-tva" for="input-product-tva"/>
                </p:outputPanel>

                <!-- input float price (with tva) -->
                <p:outputPanel class="panel-input panel-input-without-error">
                    <p:outputLabel for="input-product-price" value="#{I18N['application.crudProductTheoric.labelPrice']}"/>
                    <p:inputNumber id="input-product-price"
                                   class="#{(productTheoricBean.elementCrudSelected.hasReduction()? 'text-line-through': '')}"
                                   disabled="true"
                                   value="#{productTheoricBean.elementCrudSelected.price}"
                                   decimalPlaces="2"
                                   decimalSeparator="#{I18N['application.crudPage.decimalSeparator']}"
                                   thousandSeparator="'"
                                   symbol="€"
                                   symbolPosition="s"
                                   placeholder="#{I18N['application.crudPage.emptyValuePlaceHolder']}">
                    </p:inputNumber>
                </p:outputPanel>

                <!-- input int reduction -->
                <p:outputPanel class="panel-input" rendered="#{productTheoricBean.isModeSelected('create', 'update')}">
                    <p:outputLabel for="input-product-reduction" value="#{I18N['application.crudProductTheoric.labelReduction']}"/>
                    <p:inputNumber id="input-product-reduction"
                                   required="true"
                                   disabled="false"
                                   value="#{productTheoricBean.elementCrudSelected.reduction}"
                                   minValue="0"
                                   maxValue="90"
                                   decimalPlaces="0"
                                   symbol="%"
                                   symbolPosition="s"
                                   placeholder="#{I18N['application.crudProductTheoric.placeHolderReduction']}"
                                   validatorMessage="#{I18N['application.crudProductTheoric.errorReduction']}">
                        <p:ajax event="change" update="error-input-product-reduction, input-product-reduction, panel-input-price-reduction, input-product-price"/>
                    </p:inputNumber>
                </p:outputPanel>
                <p:outputPanel class="panel-input" rendered="#{productTheoricBean.isModeSelected('create', 'update')}">
                    <p:message id="error-input-product-reduction" for="input-product-reduction"/>
                </p:outputPanel>

                <!-- input float price (with tva and reduction) -->
                <p:outputPanel class="panel-input panel-input-without-error #{(productTheoricBean.elementCrudSelected.hasReduction()? 'show-input-line': 'hidde')}" id="panel-input-price-reduction">
                    <p:outputLabel for="input-product-pricewithreduction" value="#{I18N['application.crudProductTheoric.labelPriceWithReduction']}"/>
                    <p:inputNumber id="input-product-pricewithreduction"
                                   disabled="true"
                                   value="#{productTheoricBean.elementCrudSelected.priceWithReduction}"
                                   decimalPlaces="2"
                                   decimalSeparator="#{I18N['application.crudPage.decimalSeparator']}"
                                   thousandSeparator="'"
                                   symbol="€"
                                   symbolPosition="s"
                                   placeholder="#{I18N['application.crudPage.emptyValuePlaceHolder']}">
                    </p:inputNumber>
                </p:outputPanel>

                <!-- separator -->
                <p:separator/>

                <!-- input Object category -->
                <p:outputPanel class="panel-input">
                    <p:outputLabel for="input-product-category" value="#{I18N['application.crudProductTheoric.labelCategory']}"/>
                    <p:selectCheckboxMenu id="input-product-category"
                                          disabled="#{productTheoricBean.isModeSelected('read')}"
                                          value="#{productTheoricBean.elementCrudSelected.listCategory}"
                                          converter="CategoryConverter"
                                          filter="true"
                                          filterMatchMode="startsWith"
                                          multiple="true"
                                          class="check-box-menu-on-focus"
                                          validatorMessage="#{I18N['application.crudProductTheoric.errorCategory']}">
                        <!-- reload list entity from db. -->
                        <f:metadata>
                            <f:event type="preRenderView" listener="#{categoryBean.initAllCategory()}"/>
                        </f:metadata>
                        <f:selectItems value="#{categoryBean.allCategory}"
                                       var="cateogry"
                                       itemLabel="#{cateogry.title}"
                                       itemValue="#{cateogry}"/>
                        <p:ajax event="change" update="error-input-product-category, input-product-category"/>
                    </p:selectCheckboxMenu>
                </p:outputPanel>
                <p:outputPanel class="panel-input">
                    <p:message id="error-input-product-category" for="input-product-category"/>
                </p:outputPanel>

                <!-- input Object pegi -->
                <p:outputPanel class="panel-input">
                    <p:outputLabel for="input-product-pegi" value="#{I18N['application.crudProductTheoric.labelPegi']}"/>
                    <p:selectCheckboxMenu id="input-product-pegi"
                                          disabled="#{productTheoricBean.isModeSelected('read')}"
                                          value="#{productTheoricBean.elementCrudSelected.listPegi}"
                                          converter="PegiConverter"
                                          filter="true"
                                          filterMatchMode="startsWith"
                                          multiple="true"
                                          class="check-box-menu-on-focus"
                                          validatorMessage="#{I18N['application.crudProductTheoric.errorPegi']}">
                        <!-- reload list entity from db. -->
                        <f:metadata>
                            <f:event type="preRenderView" listener="#{pegiBean.initAllPegi()}"/>
                        </f:metadata>
                        <f:selectItems value="#{pegiBean.allPegi}"
                                       var="pegi"
                                       itemLabel="#{pegi.title}"
                                       itemValue="#{pegi}"/>
                    </p:selectCheckboxMenu>
                </p:outputPanel>
                <p:outputPanel class="panel-input">
                    <p:message id="error-input-product-pegi" for="input-product-pegi"/>
                </p:outputPanel>

                <!-- input Object operatingsystem -->
                <p:outputPanel class="panel-input">
                    <p:outputLabel for="input-product-operatingsystem" value="#{I18N['application.crudProductTheoric.labelOperatingSystem']}"/>
                    <p:selectCheckboxMenu id="input-product-operatingsystem"
                                          disabled="#{productTheoricBean.isModeSelected('read')}"
                                          value="#{productTheoricBean.elementCrudSelected.listOperatingSystem}"
                                          converter="OperatingSystemConverter"
                                          filter="true"
                                          filterMatchMode="startsWith"
                                          multiple="true"
                                          class="check-box-menu-on-focus"
                                          validatorMessage="#{I18N['application.crudProductTheoric.errorOperatingSystem']}">
                        <!-- reload list entity from db. -->
                        <f:metadata>
                            <f:event type="preRenderView" listener="#{operatingSystemBean.initAllOperatingSystem()}"/>
                        </f:metadata>
                        <f:selectItems value="#{operatingSystemBean.allOperatingSystem}"
                                       var="operatingSystem"
                                       itemLabel="#{operatingSystem.title}"
                                       itemValue="#{operatingSystem}"/>
                        <p:ajax event="change" update="error-input-product-operatingsystem, input-product-operatingsystem"/>
                    </p:selectCheckboxMenu>
                </p:outputPanel>
                <p:outputPanel class="panel-input">
                    <p:message id="error-input-product-operatingsystem" for="input-product-operatingsystem"/>
                </p:outputPanel>

                <!-- input Object language -->
                <p:outputPanel class="panel-input">
                    <p:outputLabel for="input-product-language" value="#{I18N['application.crudProductTheoric.labelLanguage']}"/>
                    <p:selectCheckboxMenu id="input-product-language"
                                          disabled="#{productTheoricBean.isModeSelected('read')}"
                                          value="#{productTheoricBean.elementCrudSelected.listLanguage}"
                                          converter="LanguageConverter"
                                          filter="true"
                                          filterMatchMode="startsWith"
                                          multiple="true"
                                          class="check-box-menu-on-focus"
                                          validatorMessage="#{I18N['application.crudProductTheoric.errorLanguage']}">
                        <!-- reload list entity from db. -->
                        <f:metadata>
                            <f:event type="preRenderView" listener="#{languageBean.initAllLanguage()}"/>
                        </f:metadata>
                        <f:selectItems value="#{languageBean.allLanguage}"
                                       var="language"
                                       itemLabel="#{language.title}"
                                       itemValue="#{language}"/>
                        <p:ajax event="change" update="error-input-product-language, input-product-language"/>
                    </p:selectCheckboxMenu>
                </p:outputPanel>
                <p:outputPanel class="panel-input">
                    <p:message id="error-input-product-language" for="input-product-language"/>
                </p:outputPanel>

                <!-- separator -->
                <p:separator/>

                <!-- input File image-->
                <p:outputPanel class="panel-input" rendered="#{productTheoricBean.isModeSelected('update')}">
                    <p:outputLabel for="input-product-inputfileimage" value="#{I18N['application.crudProductTheoric.labelInputFileImage']}"/>
                    <p:fileUpload id="input-product-inputfileimage"
                                  value="#{pictureProductBean.imageFile}"
                                  mode="advanced"
                                  listener="#{pictureProductBean.fileUploadListener}"
                                  auto="true"
                                  allowTypes="/(\.|\/)(jpe?g|png)$/"
                                  sizeLimit="102400"
                                  update="error-input-product-inputfileimage, input-product-inputfileimage, @form:panel-draw-picture"
                                  invalidSizeMessage="#{I18N['application.crudProductTheoric.errorInputFileImageSize']}"
                                  invalidFileMessage="#{I18N['application.crudProductTheoric.errorInputFileImageType']}"/>
                </p:outputPanel>
                <p:outputPanel class="panel-input" rendered="#{productTheoricBean.isModeSelected('update')}">
                    <p:message id="error-input-product-inputfileimage" for="input-product-inputfileimage"/>
                </p:outputPanel>

                <!-- draw picture -->
                <p:outputPanel class="panel-input" rendered="#{productTheoricBean.isModeSelected('read', 'update')}" id="panel-draw-picture">
                    <ui:repeat value="${productTheoricBean.elementCrudSelected.listPictureProduct}" var="pictureProduct">
                        <p:outputPanel> <!-- container for one image -->
                            <h:graphicImage url="#{pictureProduct.urlImageToDraw}"
                                            class="picture-resize"
                                            alt="#{I18N['application.crudProductTheoric.altImagePicture']}"/> <!-- image draw -->
                            <p:commandButton class="button-delete-picture"
                                             action="#{pictureProductBean.deletePictureProduct(pictureProduct)}"
                                             update="@form:panel-draw-picture"
                                             rendered="#{productTheoricBean.isModeSelected('update')}"
                                             immediate="true"
                                             icon="pi pi-times-circle"/> <!-- button delete image -->
                        </p:outputPanel>
                    </ui:repeat>
                </p:outputPanel>

                <!-- separator -->
                <p:separator/>

                <!-- input Date release -->
                <p:outputPanel class="panel-input">
                    <p:outputLabel for="input-product-release" value="#{I18N['application.crudProductTheoric.labelRelease']}"/>
                    <p:datePicker id="input-product-release"
                                  required="true"
                                  disabled="#{productTheoricBean.isModeSelected('read')}"
                                  value="#{productTheoricBean.elementCrudSelected.releaseDate}"
                                  pattern="#{I18N['application.crudPage.patternDate']}"
                                  validatorMessage="#{I18N['application.crudProductTheoric.errorRelease']}">
                        <p:ajax event="change" update="error-input-product-release, input-product-release"/>
                    </p:datePicker>
                </p:outputPanel>
                <p:outputPanel class="panel-input">
                    <p:message id="error-input-product-release" for="input-product-release"/>
                </p:outputPanel>

                <!-- input enum multyplayer -->
                <p:outputPanel class="panel-input">
                    <p:outputLabel for="input-product-multyplayer"
                                   value="#{I18N['application.crudProductTheoric.labelMultyPlayer']}"/>
                    <p:selectOneMenu id="input-product-multyplayer"
                                     required="true"
                                     disabled="#{productTheoricBean.isModeSelected('read')}"
                                     value="#{productTheoricBean.elementCrudSelected.multiPlayer}"
                                     converter="MultyPlayerConverter"
                                     validatorMessage="#{I18N['application.crudProductTheoric.errorMultyPlayer']}">
                        <f:selectItem itemLabel="#{I18N['application.crudPage.emptyValuePlaceHolder']}"
                                      itemValue="#{null}"
                                      itemDisabled="true"
                                      noSelectionOption="true"/>
                        <!-- import all enum -->
                        <p:importEnum type="be.gamepath.projectgamepath.enumeration.MultyPlayer"
                                      var="enumImportMultyPlayer"
                                      allSuffix="getAll"/>
                        <f:selectItems value="#{enumImportMultyPlayer.getAll}"
                                       var="multiPlayer"
                                       itemLabel="#{multiPlayer.getTxtValue()}"
                                       itemValue="#{multiPlayer}"/>
                        <p:ajax event="change" update="error-input-product-multyplayer, input-product-multyplayer"/>
                    </p:selectOneMenu>
                </p:outputPanel>
                <p:outputPanel class="panel-input">
                    <p:message id="error-input-product-multyplayer" for="input-product-multyplayer"/>
                </p:outputPanel>

                <!-- input Entity society (combo box) -->
                <p:outputPanel class="panel-input">
                    <p:outputLabel for="input-product-society" value="#{I18N['application.crudProductTheoric.labelSociety']}"/>
                    <p:selectOneMenu id="input-product-society"
                                     required="true"
                                     disabled="#{productTheoricBean.isModeSelected('read')}"
                                     value="#{productTheoricBean.elementCrudSelected.societyProducer}"
                                     converter="SocietyProducerConverter"
                                     effect="fade"
                                     var="s"
                                     filter="true"
                                     filterMatchMode="startsWith"
                                     onfocus="focusOnComboBox(this)"
                                     validatorMessage="#{I18N['application.crudProductTheoric.errorSociety']}">
                        <!-- reload list entity from db. -->
                        <f:metadata>
                            <f:event type="preRenderView" listener="#{societyProducerBean.initAllSocietyProducer()}"/>
                        </f:metadata>
                        <f:selectItem itemLabel="#{I18N['application.crudPage.emptyValuePlaceHolder']}"
                                      itemValue="#{null}"
                                      itemDisabled="true"
                                      noSelectionOption="true"/>
                        <f:selectItems value="#{societyProducerBean.allSocietyProducer}"
                                       var="society"
                                       itemLabel="#{society.title}"
                                       itemValue="#{society}"/>
                        <p:column>
                            <f:facet name="header">
                                <h:outputText value="#{I18N['application.crudPage.headerComboBox']}"/>
                            </f:facet>
                            <h:outputText value="#{s.title}"/>
                        </p:column>
                        <p:ajax event="change" update="error-input-product-society, input-product-society"/>
                    </p:selectOneMenu>
                </p:outputPanel>
                <p:outputPanel class="panel-input">
                    <p:message id="error-input-product-society" for="input-product-society"/>
                </p:outputPanel>

                <!-- input String description (text area) -->
                <p:outputPanel class="panel-input">
                    <p:outputLabel for="input-product-description" value="#{I18N['application.crudProductTheoric.labelDescription']}"/>
                    <p:inputTextarea id="input-product-description"
                                     required="true"
                                     disabled="#{productTheoricBean.isModeSelected('read')}"
                                     value="#{productTheoricBean.elementCrudSelected.description}"
                                     rows="6"
                                     cols="33"
                                     maxlength="255"
                                     placeholder="#{I18N['application.crudProductTheoric.placeHolderDescription']}"
                                     validatorMessage="#{I18N['application.crudProductTheoric.errorDescription']}">
                        <p:ajax event="change" update="error-input-product-description, input-product-description"/>
                    </p:inputTextarea>
                </p:outputPanel>
                <p:outputPanel class="panel-input">
                    <p:message id="error-input-product-description" for="input-product-description"/>
                </p:outputPanel>

                <!-- input boolean active -->
                <p:outputPanel class="panel-input panel-input-without-error" rendered="#{productTheoricBean.isModeSelected('create', 'update')}">
                    <p:outputLabel for="input-product-active" value="#{I18N['application.crudPage.labelActive']}"/>
                    <p:selectBooleanCheckbox id="input-product-active"
                                             value="#{productTheoricBean.elementCrudSelected.isActive}"/>
                </p:outputPanel>


                <!-- ______ end form crud ______ -->


                <!-- button submit form -->
                <p:outputPanel class="panel-input panel-submit-crud">
                    <p:commandButton value="#{I18N['application.crudPage.buttonBackLastPage']}"
                                     rendered="true"
                                     ajax="false"
                                     validateClient="false"
                                     immediate="true"
                                     class="ui-button-secondary"
                                     action="#{historicalBean.backLastPageHistoric()}"/>

                    <p:commandButton value="#{I18N['application.crudPage.buttonCreateSubmit']}"
                                     rendered="#{productTheoricBean.isModeSelected('create')}"
                                     ajax="false"
                                     validateClient="true"
                                     class="ui-button-success"
                                     action="#{productTheoricBean.submitCrudForm(historicalBean)}"/>
                    <p:commandButton value="#{I18N['application.crudPage.buttonUpdateSubmit']}"
                                     rendered="#{productTheoricBean.isModeSelected('update')}"
                                     ajax="false"
                                     validateClient="true"
                                     class="ui-button-success"
                                     action="#{productTheoricBean.submitCrudForm(historicalBean)}"/>

                    <p:commandButton value="#{I18N['application.tableProductTheoric.buttonAddBasket']}"
                                     rendered="#{productTheoricBean.isModeSelected('read') and connectionBean.isUserHasPermission('create-basketproduct')}"
                                     ajax="false"
                                     validateClient="false"
                                     immediate="true"
                                     class="ui-button-success"
                                     action="#{basketProductTheoricBean.addBasket(productTheoricBean.elementCrudSelected)}"/>
                </p:outputPanel>

            </h:form>

        </div>

    </ui:define>
</ui:composition>
</html>